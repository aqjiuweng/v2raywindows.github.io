<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://v2raywindows.github.io/news/article-28364.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>基于Apache Hudi和Debezium构建CDC入湖管道</title>
        <meta name="description" content="从 Hudi v0.10.0 开始，我们很高兴地宣布推出适用于Deltastreamer 的Debezium 源，它提供从 Postgres 和 MySQL 数据库到数据湖的变更捕获数据 (CDC) " />
        <link rel="icon" href="/assets/website/img/v2raywindows/favicon.ico" type="image/x-icon"/>
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Montserrat:300,300i,400,400i,500,500i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="__ADDON__/js/frontend/v2raywindows/aos/aos.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/v2raywindows/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/v2raywindows/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/v2raywindows/boxicons/css/boxicons.min.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/v2raywindows/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/v2raywindows/remixicon/remixicon.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/v2raywindows/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/v2raywindows/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-Q3WH4YV370"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-Q3WH4YV370');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- ======= Header ======= -->
<header id="header" class="fixed-top d-flex align-items-center">
    <div class="container d-flex align-items-center justify-content-between">
        <div class="logo">
                        <a href="/"><span>V2ray Windows</span></a>
                    </div>
        <nav id="navbar" class="navbar">
            <ul>
                                <li><a class="nav-link" href="/">首页</a></li>
                                <li><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                <li><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                <li><a class="nav-link" href="/news/">新闻资讯</a></li>
                                <li><a class="nav-link" href="#">关于</a></li>
                <li><a class="nav-link" href="#">联系</a></li>
            </ul>
            <i class="bi bi-list mobile-nav-toggle"></i>
        </nav><!-- .navbar -->
    </div>
</header><!-- End Header -->
    <main id="main">
        <!-- ======= Breadcrumbs Section ======= -->
        <section class="breadcrumbs">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h1>基于Apache Hudi和Debezium构建CDC入湖管道</h1>
                    <ol>
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li>正文</li>
                    </ol>
                </div>
            </div>
        </section><!-- End Breadcrumbs Section -->
        <!-- ======= Details Section ======= -->
        <section id="details" class="details">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<p>从 Hudi v0.10.0 开始，我们很高兴地宣布推出适用于<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://hudi.apache.org/docs/hoodie_deltastreamer"  target="_blank" rel="nofollow">Deltastreamer</a> 的<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://debezium.io/"  target="_blank" rel="nofollow">Debezium 源</a>，它提供从 Postgres 和 MySQL 数据库到数据湖的变更捕获数据 (CDC) 的摄取。有关详细信息请参阅原始<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/apache/hudi/blob/master/rfc/rfc-39/rfc-39.md"  target="_blank" rel="nofollow">RFC</a></p> <h2 id="1-背景">1. 背景</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/774e96048e8671fbed80439f4da7c4e8.jpg" alt="基于Apache Hudi和Debezium构建CDC入湖管道"></p> <p>当想要对来自事务数据库（如 Postgres 或 MySQL）的数据执行分析时，通常需要通过称为<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://debezium.io/documentation/faq/#what_is_change_data_capture"  target="_blank" rel="nofollow">更改数据捕获</a> CDC的过程将此数据引入数据仓库或数据湖等 OLAP 系统。 Debezium 是一种流行的工具，它使 CDC 变得简单，其提供了一种通过<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://debezium.io/blog/2018/07/19/advantages-of-log-based-change-data-capture/"  target="_blank" rel="nofollow">读取更改日志</a>来捕获数据库中行级更改的方法，通过这种方式 Debezium 可以避免增加数据库上的 CPU 负载，并确保捕获包括删除在内的所有变更。<br /> 现在<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://hudi.apache.org/docs/overview/"  target="_blank" rel="nofollow">Apache Hudi</a> 提供了 Debezium 源连接器，CDC 引入数据湖比以往任何时候都更容易，因为它具有一些<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://hudi.apache.org/docs/use_cases"  target="_blank" rel="nofollow">独特的差异化功能</a>。 Hudi 可在数据湖上实现高效的更新、合并和删除事务。 Hudi 独特地提供了<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://hudi.apache.org/docs/table_types#merge-on-read-table"  target="_blank" rel="nofollow">Merge-On-Read</a> 写入器，与使用 Spark 或 Flink 的典型数据湖写入器相比，该写入器可以<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://aws.amazon.com/blogs/big-data/how-amazon-transportation-service-enabled-near-real-time-event-analytics-at-petabyte-scale-using-aws-glue-with-apache-hudi/"  target="_blank" rel="nofollow">显着降低摄取延迟</a>。 最后，Apache Hudi 提供<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://hudi.apache.org/docs/querying_data#spark-incr-query"  target="_blank" rel="nofollow">增量查询</a>，因此在从数据库中捕获更改后可以在所有后续 ETL 管道中以增量方式处理这些更改下游。</p> <h2 id="2-总体设计">2. 总体设计</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/e63a713c36cb3016de1335cb8eb1daab.jpg" alt="基于Apache Hudi和Debezium构建CDC入湖管道"></p> <p>上面显示了使用 Apache Hudi 的端到端 CDC 摄取流的架构，第一个组件是 Debezium 部署，它由 Kafka 集群、schema registry（Confluent 或 Apicurio）和 Debezium 连接器组成，Debezium 连接器不断轮询数据库中的更改日志，并将每个数据库行的更改写入 AVRO 消息到每个表的专用 Kafka 主题。<br /> 第二个组件是<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://hudi.apache.org/docs/hoodie_deltastreamer"  target="_blank" rel="nofollow">Hudi Deltastreamer</a>，它为每个表从 Kafka 读取和处理传入的 Debezium 记录，并在云存储上的 Hudi 表中写入（更新）相应的行。<br /> 为了近乎实时地将数据库表中的数据提取到 Hudi 表中，我们实现了两个可插拔的 Deltastreamer 类。首先我们实现了一个<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/apache/hudi/blob/83f8ed2ae3ba7fb20813cbb8768deae6244b020c/hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/debezium/DebeziumSource.java"  target="_blank" rel="nofollow">Debezium 源</a>。 Deltastreamer 在连续模式下运行，源源不断地从给定表的 Kafka 主题中读取和处理 Avro 格式的 Debezium 更改记录，并将更新的记录写入目标 Hudi 表。 除了数据库表中的列之外，我们还摄取了一些由 Debezium 添加到目标 Hudi 表中的元字段，元字段帮助我们正确地合并更新和删除记录，使用<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://hudi.apache.org/docs/hoodie_deltastreamer#schema-providers"  target="_blank" rel="nofollow">Schema Registry</a>表中的最新模式读取记录。<br /> 其次我们实现了一个自定义的<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/apache/hudi/blob/83f8ed2ae3ba7fb20813cbb8768deae6244b020c/hudi-common/src/main/java/org/apache/hudi/common/model/debezium/AbstractDebeziumAvroPayload.java"  target="_blank" rel="nofollow">Debezium Payload</a>，它控制了在更新或删除同一行时如何合并 Hudi 记录，当接收到现有行的新 Hudi 记录时，有效负载使用相应列的较高值（MySQL 中的 FILEID 和 POS 字段以及 Postgres 中的 LSN 字段）选择最新记录，在后一个事件是删除记录的情况下，有效负载实现确保从存储中硬删除记录。 删除记录使用 op 字段标识，该字段的值 d 表示删除。</p> <h2 id="3-apache-hudi配置">3. Apache Hudi配置</h2> <p>在使用 Debezium 源连接器进行 CDC 摄取时，请务必考虑以下 Hudi 部署配置。</p> <ul> <li>记录键 - 表的 Hudi<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://hudi.apache.org/docs/next/indexing"  target="_blank" rel="nofollow">记录键</a>应设置为上游数据库中表的主键。这可确保正确应用更新，因为记录键唯一地标识 Hudi 表中的一行。</li> <li>源排序字段 - 对于更改日志记录的重复数据删除，源排序字段应设置为数据库上发生的更改事件的实际位置。 例如我们分别使用 MySQL 中的 FILEID 和 POS 字段以及 Postgres 数据库中的 LSN 字段来确保记录在原始数据库中以正确的出现顺序进行处理。</li> <li>分区字段 - 不要将 Hudi 表的分区与与上游数据库相同的分区字段相匹配。当然也可以根据需要为 Hudi 表单独设置分区字段。</li> </ul> <h3 id="31-引导现有表">3.1 引导现有表</h3> <p>一个重要的用例可能是必须对现有数据库表进行 CDC 摄取。在流式传输更改之前我们可以通过两种方式获取现有数据库数据：</p> <ul> <li>默认情况下，Debezium 在初始化时执行数据库的初始一致快照（由 config snapshot.mode 控制）。在初始快照之后它会继续从正确的位置流式传输更新以避免数据丢失。</li> <li>虽然第一种方法很简单，但对于大型表，Debezium 引导初始快照可能需要很长时间。或者我们可以运行 Deltastreamer 作业，使用<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/apache/hudi/blob/master/hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/JdbcSource.java"  target="_blank" rel="nofollow">JDBC 源</a>直接从数据库引导表，这为用户定义和执行引导数据库表所需的更优化的 SQL 查询提供了更大的灵活性。引导作业成功完成后，将执行另一个 Deltastreamer 作业，处理来自 Debezium 的数据库更改日志，用户必须在 Deltastreamer 中使用<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://hudi.apache.org/docs/hoodie_deltastreamer/#checkpointing"  target="_blank" rel="nofollow">检查点</a>来确保第二个作业从正确的位置开始处理变更日志，以避免数据丢失。</li> </ul> <h3 id="32-例子">3.2 例子</h3> <p>以下描述了使用 AWS RDS 实例 Postgres、基于 Kubernetes 的 Debezium 部署和在 Spark 集群上运行的 Hudi Deltastreamer 实施端到端 CDC 管道的步骤。</p> <h3 id="33-数据库">3.3 数据库</h3> <p>RDS 实例需要进行一些配置更改才能启用逻辑复制。</p> <pre><code class="language-shell">SET rds.logical_replication to 1 (instead of 0) psql --host=&lt;aws_rds_instance&gt; --port=5432 --username=postgres --password -d &lt;database_name&gt;; CREATE PUBLICATION &lt;publication_name&gt; FOR TABLE schema1.table1, schema1.table2; ALTER TABLE schema1.table1 REPLICA IDENTITY FULL;</code></pre> <h3 id="34-debezium-连接器">3.4 Debezium 连接器</h3> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://strimzi.io/blog/2020/01/27/deploying-debezium-with-kafkaconnector-resource/"  target="_blank" rel="nofollow">Strimzi</a> 是在 Kubernetes 集群上部署和管理 Kafka 连接器的推荐选项，或者可以选择使用 Confluent 托管的<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://docs.confluent.io/debezium-connect-postgres-source/current/overview.html"  target="_blank" rel="nofollow">Debezium 连接器</a>。</p> <pre><code class="language-shell">kubectl create namespace kafka kubectl create -f https://strimzi.io/install/latest?namespace=kafka -n kafka kubectl -n kafka apply -f kafka-connector.yaml</code></pre> <p>kafka-connector.yaml 的示例如下所示：</p> <pre><code class="language-yaml">apiVersion: kafka.strimzi.io/v1beta2 kind: KafkaConnect metadata: name: debezium-kafka-connect annotations: strimzi.io/use-connector-resources: "false" spec: image: debezium-kafka-connect:latest replicas: 1 bootstrapServers: localhost:9092 config: config.storage.replication.factor: 1 offset.storage.replication.factor: 1 status.storage.replication.factor: 1</code></pre> <p>可以使用以下包含 Postgres Debezium 连接器的 Dockerfile 构建 docker 映像 debezium-kafka-connect</p> <pre><code>FROM confluentinc/cp-kafka-connect:6.2.0 as cp RUN confluent-hub install --no-prompt confluentinc/kafka-connect-avro-converter:6.2.0 FROM strimzi/kafka:0.18.0-kafka-2.5.0 USER root:root RUN yum -y update RUN yum -y install git RUN yum -y install wget  RUN wget https://repo1.maven.org/maven2/io/debezium/debezium-connector-postgres/1.6.1.Final/debezium-connector-postgres-1.6.1.Final-plugin.tar.gz RUN tar xzf debezium-connector-postgres-1.6.1.Final-plugin.tar.gz  RUN mkdir -p /opt/kafka/plugins/debezium &amp;&amp; mkdir -p /opt/kafka/plugins/avro/ RUN mv debezium-connector-postgres /opt/kafka/plugins/debezium/ COPY --from=cp /usr/share/confluent-hub-components/confluentinc-kafka-connect-avro-converter/lib /opt/kafka/plugins/avro/ USER 1001</code></pre> <p>一旦部署了 Strimzi 运算符和 Kafka 连接器，我们就可以启动 Debezium 连接器。</p> <pre><code>curl -X POST -H "Content-Type:application/json" -d @connect-source.json http://localhost:8083/connectors/</code></pre> <p>以下是设置 Debezium 连接器以生成两个表 table1 和 table2 的更改日志的配置示例。<br /> connect-source.json 的内容如下</p> <pre><code class="language-json">{   "name": "postgres-debezium-connector",   "config": {     "connector.class": "io.debezium.connector.postgresql.PostgresConnector",     "database.hostname": "localhost",     "database.port": "5432",     "database.user": "postgres",     "database.password": "postgres",     "database.dbname": "database",     "plugin.name": "pgoutput",     "database.server.name": "postgres",     "table.include.list": "schema1.table1,schema1.table2",     "publication.autocreate.mode": "filtered",     "tombstones.on.delete":"false",     "key.converter": "io.confluent.connect.avro.AvroConverter",     "key.converter.schema.registry.url": "&lt;schema_registry_host&gt;",     "value.converter": "io.confluent.connect.avro.AvroConverter",     "value.converter.schema.registry.url": "&lt;schema_registry_host&gt;",     "slot.name": "pgslot"   } }</code></pre> <h3 id="35-hudi-deltastreamer">3.5 Hudi Deltastreamer</h3> <p>接下来我们使用 Spark 运行 Hudi Deltastreamer，它将从 kafka 摄取 Debezium 变更日志并将它们写入 Hudi 表。 下面显示了一个这样的命令实例，它适用于 Postgres 数据库。 几个关键配置如下：</p> <ul> <li>将源类设置为 PostgresDebeziumSource。</li> <li>将有效负载类设置为 PostgresDebeziumAvroPayload。</li> <li>为 Debezium Source 和 Kafka Source 配置模式注册表 URL。</li> <li>将记录键设置为数据库表的主键。</li> <li>将源排序字段 (dedup) 设置为 _event_lsn</li> </ul> <pre><code class="language-shell">spark-submit \\   --jars "/home/hadoop/hudi-utilities-bundle_2.12-0.10.0.jar,/usr/lib/spark/external/lib/spark-avro.jar" \\   --master yarn --deploy-mode client \\   --class org.apache.hudi.utilities.deltastreamer.HoodieDeltaStreamer /home/hadoop/hudi-packages/hudi-utilities-bundle_2.12-0.10.0-SNAPSHOT.jar \\   --table-type COPY_ON_WRITE --op UPSERT \\   --target-base-path s3://bucket_name/path/for/hudi_table1 \\   --target-table hudi_table1  --continuous \\   --min-sync-interval-seconds 60 \\   --source-class org.apache.hudi.utilities.sources.debezium.PostgresDebeziumSource \\   --source-ordering-field _event_lsn \\   --payload-class org.apache.hudi.common.model.debezium.PostgresDebeziumAvroPayload \\   --hoodie-conf schema.registry.url=https://localhost:8081 \\   --hoodie-conf hoodie.deltastreamer.schemaprovider.registry.url=https://localhost:8081/subjects/postgres.schema1.table1-value/versions/latest \\   --hoodie-conf hoodie.deltastreamer.source.kafka.value.deserializer.class=io.confluent.kafka.serializers.KafkaAvroDeserializer \\   --hoodie-conf hoodie.deltastreamer.source.kafka.topic=postgres.schema1.table1 \\   --hoodie-conf auto.offset.reset=earliest \\   --hoodie-conf hoodie.datasource.write.recordkey.field=”database_primary_key” \\   --hoodie-conf hoodie.datasource.write.partitionpath.field=partition_key \\   --enable-hive-sync \\   --hoodie-conf hoodie.datasource.hive_sync.partition_extractor_class=org.apache.hudi.hive.MultiPartKeysValueExtractor \\   --hoodie-conf hoodie.datasource.write.hive_style_partitioning=true \\   --hoodie-conf hoodie.datasource.hive_sync.database=default \\   --hoodie-conf hoodie.datasource.hive_sync.table=hudi_table1 \\   --hoodie-conf hoodie.datasource.hive_sync.partition_fields=partition_key</code></pre> <h2 id="4-总结">4. 总结</h2> <p>这篇文章介绍了用于 Hudi Deltastreamer 的 Debezium 源，以将 Debezium 更改日志提取到 Hudi 表中。 现在可以将数据库数据提取到数据湖中，以提供一种经济高效的方式来存储和分析数据库数据。<br /> 请关注此<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://issues.apache.org/jira/browse/HUDI-1290"  target="_blank" rel="nofollow">JIRA</a> 以了解有关此新功能的更多信息。</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-28363.htm">关于Postman调试@RequestBody入参模式接口的用例说明</a></p>
                                        <p>下一个：<a href="/news/article-28826.htm">bellman-ford 单源最短路问题 图解</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-11-4-node-share.htm" title="11月4日|SSR/Shadowrocket/Clash/V2ray每天更新20.6M/S免费节点订阅链接，付费节点订阅推荐">11月4日|SSR/Shadowrocket/Clash/V2ray每天更新20.6M/S免费节点订阅链接，付费节点订阅推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-21-node-share-links.htm" title="10月21日|Clash/V2ray/Shadowrocket/SSR每天更新19.4M/S免费节点订阅链接，付费节点订阅推荐">10月21日|Clash/V2ray/Shadowrocket/SSR每天更新19.4M/S免费节点订阅链接，付费节点订阅推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-19-clash-v2ray-ss-ssr.htm" title="12月19日|V2ray/Clash/SSR/Shadowrocket每天更新21.4M/S免费节点订阅链接，付费节点订阅推荐">12月19日|V2ray/Clash/SSR/Shadowrocket每天更新21.4M/S免费节点订阅链接，付费节点订阅推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-29-free-v2ray.htm" title="11月29日|V2ray/SSR/Clash/Shadowrocket每天更新21.5M/S免费节点订阅链接，付费节点订阅推荐">11月29日|V2ray/SSR/Clash/Shadowrocket每天更新21.5M/S免费节点订阅链接，付费节点订阅推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-7-free-node-subscribe-links.htm" title="10月7日|V2ray/SSR/Shadowrocket/Clash每天更新18.8M/S免费节点订阅链接">10月7日|V2ray/SSR/Shadowrocket/Clash每天更新18.8M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-26020.htm" title="动物防疫站给狗狗打的疫苗有没有效果 动物防疫站给狗狗打的疫苗有没有效果啊">动物防疫站给狗狗打的疫苗有没有效果 动物防疫站给狗狗打的疫苗有没有效果啊</a></li>
                        <li class="py-2"><a href="/news/article-18721.htm" title="Java核心知识1：泛型机制详解">Java核心知识1：泛型机制详解</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-17-free-high-speed-nodes.htm" title="10月17日|Shadowrocket/V2ray/Clash/SSR每天更新19.3M/S免费节点订阅链接，付费节点订阅推荐">10月17日|Shadowrocket/V2ray/Clash/SSR每天更新19.3M/S免费节点订阅链接，付费节点订阅推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-22-node-share-links.htm" title="8月22日|Clash/Shadowrocket/V2ray/SSR每天更新19.9M/S免费节点订阅链接">8月22日|Clash/Shadowrocket/V2ray/SSR每天更新19.9M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-27-free-v2ray.htm" title="11月27日|SSR/Shadowrocket/V2ray/Clash每天更新20.5M/S免费节点订阅链接，付费节点订阅推荐">11月27日|SSR/Shadowrocket/V2ray/Clash每天更新20.5M/S免费节点订阅链接，付费节点订阅推荐</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">66</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">2</span> <a href="/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section><!-- End Details Section -->
    </main><!-- End #main -->
        <!-- ======= Footer ======= -->
    <footer id="footer">
        <div class="container">
            <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <a href="/">V2ray Windows免费节点订阅站</a> 版权所有 Powered by WordPress
            </div>
        </div>
    </footer><!-- End Footer -->
    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <div id="preloader"></div>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/v2raywindows/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/v2raywindows/aos/aos.js"></script>
    <script src="/assets/website/js/frontend/v2raywindows/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/v2raywindows/glightbox/js/glightbox.min.js"></script>
    <script src="/assets/website/js/frontend/v2raywindows/php-email-form/validate.js"></script>
    <script src="/assets/website/js/frontend/v2raywindows/purecounter/purecounter.js"></script>
    <script src="/assets/website/js/frontend/v2raywindows/swiper/swiper-bundle.min.js"></script>
    <!-- Template Main JS File -->
    <script src="/assets/website/js/frontend/v2raywindows/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>